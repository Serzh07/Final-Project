---
title: "Data Analysis"
format: html
editor: visual
execute: 
  echo: false
---

```{r}
#| message: false

library(dplyr)
library(ggplot2)



#First Graphic

file_path <- "C:/Users/SERGV/Downloads/Final-Project/StormEvents_details-ftp_v1.0_d2022_c20240716.csv"


storm_data <- read.csv(file_path)


data <- storm_data %>%
  mutate(season = case_when(
    MONTH_NAME %in% c("March", "April", "May") ~ "Spring",
    MONTH_NAME %in% c("June", "July", "August") ~ "Summer",
    MONTH_NAME %in% c("September", "October", "November") ~ "Autumn",
    MONTH_NAME %in% c("December", "January", "February") ~ "Winter",
    TRUE ~ NA_character_  
  ))

month_data <- data %>%
  group_by(MONTH_NAME, season) %>%
  summarise(count = n()) %>%
  arrange(factor(MONTH_NAME, levels = c("January", "February", "March", "April", 
                                        "May", "June", "July", "August", 
                                        "September", "October", "November", "December")))


ggplot(month_data, aes(x = factor(MONTH_NAME, levels = c("January", "February", "March", "April", 
                                                         "May", "June", "July", "August", 
                                                         "September", "October", "November", "December")), 
                       y = count, fill = season)) +
  geom_bar(stat = "identity") +
  coord_polar(theta = "x") +
  theme_minimal() +
  labs(title = "Number of Extreme Weather Events by Month USA",
       x = "",
       y = "Number of Events") +
  scale_fill_manual(values = c("Spring" = "#C5FF95", "Summer" = "yellow", "Autumn" = "orange", "Winter" = "#6EACDA")) +
  theme(axis.text.x = element_text(size = 12, face = "bold", angle = 90),
        plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))


```

```{r}
#|message: false
#Second Graphic

library(dplyr)
library(ggplot2)
library(ggridges)

filtered_data <- storm_data %>%
  filter(STATE %in% c("PENNSYLVANIA", "OKLAHOMA", "TEXAS", "MISSISSIPPI", "NEW MEXICO", "FLORIDA"),
         EVENT_TYPE %in% c("Tornado", "Flood", "Hail", "Thunderstorm Wind", "Heavy Rain"))%>%
  group_by(EVENT_TYPE, STATE) %>%
  filter(n() > 10) %>%
  ungroup()


ggplot(filtered_data, aes(x = MONTH_NAME, y = EVENT_TYPE, fill = EVENT_TYPE)) +
  geom_density_ridges(alpha = 0.5, scale = 1,rel_min_height = 0.01) +
  theme_ridges(center_axis_labels = TRUE) +
  scale_fill_viridis_d(option = "C") +
  labs(
    title = "Ridgeline Chart of Selected Event Types",
    x = "Month",
    y = "Event Type",
    fill = "Event Type"
  ) +
  theme(
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text.x = element_text(size = 10, angle = 90, hjust = 1, vjust = 1),
    axis.text.y = element_text(size = 12),
    legend.position = "right",
    plot.margin = margin(20) # Increase margin if needed
  )

```

```{r}

# Load necessary libraries
library(dplyr)
library(stringr)
library(leaflet)
library(sp)
library(maps)

# Read the CSV file
data <- read.csv("C:/Users/SERGV/Downloads/Final-Project/StormEvents_details-ftp_v1.0_d2022_c20240716.csv")

# Function to convert damage values to numeric
convert_damage <- function(damage) {
  if (is.na(damage)) {
    return(0)
  }
  multiplier <- 1
  if (str_detect(damage, "K$")) {
    multiplier <- 1e3
  } else if (str_detect(damage, "M$")) {
    multiplier <- 1e6
  } else if (str_detect(damage, "B$")) {
    multiplier <- 1e9
  }
  return(as.numeric(str_remove(damage, "[KMB]$")) * multiplier)
}

# Apply the conversion function
data$DAMAGE_PROPERTY <- sapply(data$DAMAGE_PROPERTY, convert_damage)
data$DAMAGE_CROPS <- sapply(data$DAMAGE_CROPS, convert_damage)

# Aggregate the data by state
state_damage_summary <- data %>%
  group_by(STATE) %>%
  summarize(
    total_property_damage = sum(DAMAGE_PROPERTY, na.rm = TRUE),
    total_crop_damage = sum(DAMAGE_CROPS, na.rm = TRUE)
  ) %>%
  mutate(total_damage = total_property_damage + total_crop_damage)

# Scale down the total damage values (e.g., to millions of dollars)
scale_factor <- 1e6
state_damage_summary <- state_damage_summary %>%
  mutate(total_damage_scaled = total_damage / scale_factor)

# Create a data frame with state names and abbreviations
state_abbr <- data.frame(
  state = tolower(state.name),
  abbreviation = state.abb
)

# Merge the damage summary with state abbreviations
state_damage_summary <- state_damage_summary %>%
  left_join(state_abbr, by = c("STATE" = "abbreviation"))

# Replace NA in 'state' column with state abbreviation
state_damage_summary$state <- ifelse(is.na(state_damage_summary$state), tolower(state_damage_summary$STATE), state_damage_summary$state)

# Get US states map data
states <- map("state", fill = TRUE, plot = FALSE)

# Set the range for total damage
min_damage <- 6e6  # $6,000,000
max_damage <- 1.023e9  # $1,023,000,000

# Create a color palette based on the scaled total damage
pal <- colorNumeric(palette = "YlOrRd", domain = state_damage_summary$total_damage_scaled)

# Create the leaflet map
leaflet(data = states) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~pal(state_damage_summary$total_damage_scaled[match(states$names, state_damage_summary$state)]),
    fillOpacity = 0.7,
    color = "#BDBDC3",
    weight = 1,
    label = ~paste(state_damage_summary$state, ": $", formatC(state_damage_summary$total_damage_scaled, format = "f", big.mark = ","), "M"),
    highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE)
  ) %>%
  addLegend(pal = pal, values = state_damage_summary$total_damage_scaled, opacity = 0.7, title = "Total Damage (Millions of $)", position = "bottomright")
```
